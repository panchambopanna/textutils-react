{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","background","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","logo","about","htmlFor","themeSelect","defaultChecked","name","value","toggleMode","TextForm","text","setText","heading","rows","placeholder","onChange","e","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","find","document","getElementById","replc","indexOf","console","log","length","alert","replace","split","join","myBox","select","navigator","clipboard","writeText","Math","round","display","Alert","role","lower","charAt","slice","Capitalize","msg","defaultProps","App","setMode","setAlert","setColor","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f4f9cf8a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        background: 'white'\r\n    });\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const handleModes = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                background: 'black'\r\n            });\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                background: 'white'\r\n            });\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    };    \r\n\r\n    return (\r\n        <div className=\" my-3 container\" style = {myStyle}>\r\n            <h2 className=\"my-2\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style = {myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style = {myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style = {myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style = {myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style = {myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary my-3\" onClick={handleModes}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.logo}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    {/*Radio button*/}\r\n                    <label htmlFor=\"inlineRadioOptions\" style={props.mode === 'light' ? {color: 'black'} : {color:'white'}}>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} defaultChecked type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"primary\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Blue</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"secondary\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Gray</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"success\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Green</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"danger\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Red</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"warning\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Yellow</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"info\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Aqua</label>\r\n                        </div>\r\n                    </label>\r\n\r\n                    {/*Toggle Dark Mode button */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.btnText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    logo: PropTypes.string.isRequired, //used to specify that it is required\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    logo: 'Default Logo',\r\n    about: 'Insert title here',\r\n    btnText: 'Toggle Mode'\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const valueUpdate = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const changeToUpper = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Coverted to Upper Case', 'success');\r\n    }\r\n\r\n    const changeToLower = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Coverted to Lower Case', 'success');\r\n    }\r\n\r\n    const handleReplace = () => {\r\n        let find = document.getElementById('findText').value;\r\n        let replc = document.getElementById('replaceText').value;\r\n        if (text.indexOf(find) === 0){\r\n            find = find + \" \";\r\n            replc = replc + \" \";\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n        else if (text.indexOf(find) === text.length-find.length) {\r\n            find = \" \"+ find;\r\n            replc = \" \"+ replc;\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n        else {\r\n            find = \" \" + find + \" \";\r\n            replc = \" \" + replc + \" \";\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n\r\n        if (text.indexOf(find) === -1){\r\n            console.log(text.indexOf(find));\r\n            alert(\"Word not found\");\r\n        }\r\n\r\n        let newText = text.replace(find,replc);\r\n        console.log(newText);\r\n        setText(newText);\r\n    }\r\n    \r\n    const handleCopyText = () => {\r\n        let myBox = document.getElementById('myBox');\r\n        myBox.select();\r\n        navigator.clipboard.writeText(myBox.value);\r\n        props.showAlert('Text has been copied', 'success');\r\n    }\r\n    \r\n    const handleRemoveSpace = () => {\r\n        let newText = text.split(/[ ] + /);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra spaces has been removed', 'success');\r\n    }\r\n    \r\n    const handleClear = () => {\r\n        setText(\"\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <div className = 'container' style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h1 className=\"my-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} id=\"myBox\" rows=\"5\" placeholder=\"Enter you text here\" onChange={valueUpdate} style={{backgroundColor: props.mode==='light'?'white':'lightgray', color: props.mode==='light'?'black':'white'}}></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.color}`} onClick={changeToUpper}>Convert to UPPERCASE</button>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={changeToLower}>Convert to lowercase</button>\r\n            {/* find and place */}\r\n            <label htmlFor=\"findText\">Find: </label>\r\n            <input className=\"mx-1\" type=\"text\" id=\"findText\" />\r\n            <label htmlFor=\"replaceText\">Replace By: </label>\r\n            <input className=\"mx-1\" type=\"text\" id=\"replaceText\" />\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleReplace}>Replace</button>\r\n            {/*end of find and replace*/}\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleRemoveSpace}>Remove Extra Space</button><br/><br/>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleCopyText}>Copy Text</button>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleClear}>Clear</button>\r\n\r\n            <div className=\"container\">\r\n                <h2>Summary</h2>\r\n                <p>There are {text.length>0?text.split(\" \").length:text.split(\" \").length-1} words and {text.length} characters</p>\r\n                <p>This can be read in {Math.round((text.split(\" \").length-1)*0.008*60)} seconds </p>\r\n                <div style={text.length>0?{display:'block'}:{display:'none'}}>\r\n                    <h2>Preview</h2>\r\n                    <p>{text}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nTextForm.defaultProps = {\r\n    color: 'primary'\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalize = (type)=>{\r\n        const lower = type.toLowerCase();\r\n        return(type.charAt(0).toUpperCase() + lower.slice(1));\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}: </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [btnText, setBtnText] = useState('Enable Dark Mode');\n  const [alert, setAlert] = useState(null);\n  const [color, setColor] = useState('primary');\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'gray';\n      setBtnText('Enable Light Mode');\n      showAlert('Dark mode has been enabled', 'success');\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      setBtnText('Enable Dark Mode');\n      showAlert('Light mode has been enabled', 'success');\n    }\n  }\n\n  const themeSelect = (e) => {\n    setColor(e.target.value);\n    console.log(setColor);\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar logo='TextUtils' about='About' mode={mode} toggleMode={toggleMode} btnText={btnText} showAlert={showAlert} themeSelect={themeSelect} />\n        <Alert alert={alert} />\n        <Switch>\n          <Route exact path=\"/\">\n            <TextForm heading='Enter a text to analyze' mode={mode} showAlert={showAlert} color={color} />\n          </Route>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}