{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","logo","type","id","about","htmlFor","style","color","onClick","themeSelect","defaultChecked","name","value","toggleMode","btnText","TextForm","useState","text","setText","heading","rows","placeholder","onChange","e","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","find","document","getElementById","replc","indexOf","console","log","length","alert","replace","split","join","myBox","select","navigator","clipboard","writeText","Math","round","display","Alert","role","lower","charAt","slice","Capitalize","msg","defaultProps","App","setMode","setBtnText","setAlert","setColor","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.55e4f9ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.logo}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"#\">{props.about}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    {/*Radio button*/}\r\n                    <label htmlFor=\"inlineRadioOptions\" style={props.mode === 'light' ? {color: 'black'} : {color:'white'}}>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} defaultChecked type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"primary\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Blue</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"secondary\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Gray</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"success\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Green</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"danger\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Red</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"warning\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Yellow</label>\r\n                        </div>\r\n                        <div className=\"form-check form-check-inline\">\r\n                            <input className=\"form-check-input\" onClick={props.themeSelect} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"info\"/>\r\n                            <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Aqua</label>\r\n                        </div>\r\n                    </label>\r\n\r\n                    {/*Toggle Dark Mode button */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.btnText}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    logo: PropTypes.string.isRequired, //used to specify that it is required\r\n    about: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    logo: 'Default Logo',\r\n    about: 'Insert title here',\r\n    btnText: 'Toggle Mode'\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const valueUpdate = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    const changeToUpper = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Coverted to Upper Case', 'success');\r\n    }\r\n\r\n    const changeToLower = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Coverted to Lower Case', 'success');\r\n    }\r\n\r\n    const handleReplace = () => {\r\n        let find = document.getElementById('findText').value;\r\n        let replc = document.getElementById('replaceText').value;\r\n        if (text.indexOf(find) === 0){\r\n            find = find + \" \";\r\n            replc = replc + \" \";\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n        else if (text.indexOf(find) === text.length-find.length) {\r\n            find = \" \"+ find;\r\n            replc = \" \"+ replc;\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n        else {\r\n            find = \" \" + find + \" \";\r\n            replc = \" \" + replc + \" \";\r\n            console.log(text.indexOf(find))\r\n            console.log(find);\r\n        }\r\n\r\n        if (text.indexOf(find) === -1){\r\n            console.log(text.indexOf(find));\r\n            alert(\"Word not found\");\r\n        }\r\n\r\n        let newText = text.replace(find,replc);\r\n        console.log(newText);\r\n        setText(newText);\r\n    }\r\n    \r\n    const handleCopyText = () => {\r\n        let myBox = document.getElementById('myBox');\r\n        myBox.select();\r\n        navigator.clipboard.writeText(myBox.value);\r\n        props.showAlert('Text has been copied', 'success');\r\n    }\r\n    \r\n    const handleRemoveSpace = () => {\r\n        let newText = text.split(/[ ] + /);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra spaces has been removed', 'success');\r\n    }\r\n    \r\n    const handleClear = () => {\r\n        setText(\"\");\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <div className = 'container' style={{color: props.mode==='light'?'black':'white'}}>\r\n            <h1 className=\"my-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={text} id=\"myBox\" rows=\"5\" placeholder=\"Enter you text here\" onChange={valueUpdate} style={{backgroundColor: props.mode==='light'?'white':'lightgray', color: props.mode==='light'?'black':'white'}}></textarea>\r\n            </div>\r\n            <button className={`btn btn-${props.color}`} onClick={changeToUpper}>Convert to UPPERCASE</button>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={changeToLower}>Convert to lowercase</button>\r\n            {/* find and place */}\r\n            <label htmlFor=\"findText\">Find: </label>\r\n            <input className=\"mx-1\" type=\"text\" id=\"findText\" />\r\n            <label htmlFor=\"replaceText\">Replace By: </label>\r\n            <input className=\"mx-1\" type=\"text\" id=\"replaceText\" />\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleReplace}>Replace</button>\r\n            {/*end of find and replace*/}\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleRemoveSpace}>Remove Extra Space</button><br/><br/>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleCopyText}>Copy Text</button>\r\n            <button className={`mx-1 btn btn-${props.color}`} onClick={handleClear}>Clear</button>\r\n\r\n            <div className=\"container\">\r\n                <h2>Summary</h2>\r\n                <p>There are {text.length>0?text.split(\" \").length:text.split(\" \").length-1} words and {text.length} characters</p>\r\n                <p>This can be read in {Math.round((text.split(\" \").length-1)*0.008*60)} seconds </p>\r\n                <div style={text.length>0?{display:'block'}:{display:'none'}}>\r\n                    <h2>Preview</h2>\r\n                    <p>{text}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nTextForm.defaultProps = {\r\n    color: 'primary'\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalize = (type)=>{\r\n        const lower = type.toLowerCase();\r\n        return(type.charAt(0).toUpperCase() + lower.slice(1));\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalize(props.alert.type)}: </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","//import logo from './logo.svg';\nimport './App.css';\n//import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [btnText, setBtnText] = useState('Enable Dark Mode');\n  const [alert, setAlert] = useState(null);\n  const [color, setColor] = useState('primary');\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'gray';\n      setBtnText('Enable Light Mode');\n      showAlert('Dark mode has been enabled', 'success');\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      setBtnText('Enable Dark Mode');\n      showAlert('Light mode has been enabled', 'success');\n    }\n  }\n\n  const themeSelect = (e) => {\n    setColor(e.target.value);\n    console.log(setColor);\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar logo='TextUtils' about='About' mode={mode} toggleMode={toggleMode} btnText={btnText} showAlert={showAlert} themeSelect={themeSelect} />\n        <Alert alert={alert} />\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n            <TextForm heading='Enter a text to analyze' mode={mode} showAlert={showAlert} color={color} />\n          {/* </Route>\n        </Switch>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}